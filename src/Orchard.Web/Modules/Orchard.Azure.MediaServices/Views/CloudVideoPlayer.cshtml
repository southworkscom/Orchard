@using Newtonsoft.Json;

@{
    Style.Include("amp/azuremediaplayer.min.css");
    Script.Include("amp/azuremediaplayer.min.js").AtHead();

    var altText = Model.AlternateText;
    var assetDataJson = JsonConvert.SerializeObject(Model.AssetData, Formatting.None);
    Random rand = new Random();
    var renderId = rand.Next(0,10000);
    var playerWidth = Model.PlayerWidth; // Width (in pixels) of the rendered player.
    var playerHeight = Model.PlayerHeight; // Height (in pixels) of the rendered player.
    var autoPlay = Model.AutoPlay; // True to start playing the video automatically, otherwise false.
}
<video id="amp-@Html.Raw(renderId)" class="azuremediaplayer amp-default-skin" autoplay="@autoPlay.ToString().ToLower()" controls width="@playerWidth" height="@playerHeight">
    <p class="amp-no-js">
        @(!String.IsNullOrEmpty(altText) ? T("Description of video item: {0}", altText).Text : "")
    </p>
</video>
<script>
    (function () {
        var videoUrl = undefined,
            id = 'amp-@Html.Raw(renderId)',
            data = JSON.parse('@Html.Raw(assetDataJson.ToString())');

        if (data.VideoAssets &&
            Array.isArray(data.VideoAssets) &&
            data.VideoAssets.length > 0 &&
            data.VideoAssets[0].MainFileUrl)
        {
            videoUrl = data.VideoAssets[0].MainFileUrl;
        }

        if (data.DynamicVideoAssets &&
            Array.isArray(data.DynamicVideoAssets) &&
            data.DynamicVideoAssets.length > 0 &&
            data.DynamicVideoAssets[0].SmoothStreamingUrl)
        {
            videoUrl = data.DynamicVideoAssets[0].SmoothStreamingUrl;
        }

        if (videoUrl) {
            var player = amp(id, { logo: { enabled: false }, autoplay: @autoPlay.ToString().ToLower() }, function () {
                this.src({ src: videoUrl });
            });
        }
    })();
</script>
